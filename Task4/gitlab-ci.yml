image: python:3.7

stages:
  - prepare
  - test
  - code-scan
  - deploy-files
  - docker-build
  - docker-scan
  - docker-push

variables:
  BUILD_DIR: ./build
  DOCKER_IMAGE: $DOCKER_USERNAME/ecommerce
  DOCKER_TAG: $CI_PIPELINE_IID
  DOCKER_TLS_CERTDIR: "/certs"


prepare:
  stage: prepare
  script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python manage.py collectstatic --noinput
    - python manage.py migrate
    - mkdir -p $BUILD_DIR
    - cp -r static_root/ $BUILD_DIR/static
    - cp -r demo/ $BUILD_DIR/code
  artifacts:
    paths:
      - $BUILD_DIR

test:
  stage: test
  script:
    - pip install pytest
    - pytest || echo "No Tests Found..."
  allow_failure: false  

code-scan:
  stage: code-scan
  script:
    - pip install bandit
    - bandit -r .
  allow_failure: true  

deploy-files:
  stage: deploy-files
  image: alpine:latest
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$EC2_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    - scp -r $BUILD_DIR/* $EC2_USER@$EC2_HOST:/home/$EC2_USER
  needs: ["prepare", "test", "code-scan"]

build_docker_image:
  stage: docker-build
  image: docker:latest
  services:
    - docker:24.0.5-dind
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG -t $DOCKER_IMAGE:latest .
    - docker save -o image.tar $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest
  artifacts:
    paths:
      - image.tar
  needs: ["code-scan", "prepare", "test"] 

docker-scan:
  stage: docker-scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  script:
   - trivy image --input image.tar --exit-code 1 --severity HIGH,CRITICAL
  allow_failure: true
  needs: ["build_docker_image"]

docker-push:
  stage: docker-push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKER_USERNAME" --password-stdin
  script:
    - docker load -i image.tar
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  needs: ["docker-scan", "build_docker_image"]